; ModuleID = 'Decaf compiler jit'

@x = common global i32 0
@i = common global i32 0
@j = common global i32 0
@0 = private unnamed_addr constant [3 x i8] c"yo\00"
@1 = private unnamed_addr constant [3 x i8] c"%s\00"
@2 = private unnamed_addr constant [3 x i8] c"%s\00"
@3 = private unnamed_addr constant [2 x i8] c" \00"
@4 = private unnamed_addr constant [3 x i8] c"%d\00"
@5 = private unnamed_addr constant [3 x i8] c"%s\00"
@6 = private unnamed_addr constant [2 x i8] c"\0A\00"

define void @main() {
entry:
  store i32 5, i32* @x
  %printfCall = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i32 0, i32 0))
  %printfCall1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  %printfCall2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i32 0, i32 0), i32 5)
  %printfCall3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*, ...)
