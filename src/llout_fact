; ModuleID = 'Decaf compiler jit'

@a = common global i32 0
@b = common global i32 0
@fac = common global i32 0
@0 = private unnamed_addr constant [11 x i8] c"factorial(\00"
@1 = private unnamed_addr constant [3 x i8] c"%s\00"
@2 = private unnamed_addr constant [3 x i8] c"%s\00"
@3 = private unnamed_addr constant [2 x i8] c" \00"
@4 = private unnamed_addr constant [3 x i8] c"%d\00"
@5 = private unnamed_addr constant [3 x i8] c"%s\00"
@6 = private unnamed_addr constant [2 x i8] c" \00"
@7 = private unnamed_addr constant [7 x i8] c") is: \00"
@8 = private unnamed_addr constant [3 x i8] c"%s\00"
@9 = private unnamed_addr constant [3 x i8] c"%s\00"
@10 = private unnamed_addr constant [2 x i8] c" \00"
@11 = private unnamed_addr constant [3 x i8] c"%d\00"
@12 = private unnamed_addr constant [3 x i8] c"%s\00"
@13 = private unnamed_addr constant [2 x i8] c"\0A\00"

define void @main() {
entry:
  store i32 1, i32* @a
  store i32 1, i32* @fac
  br label %L1

L1:                                               ; preds = %L1, %entry
  %0 = load i32, i32* @fac
  %1 = load i32, i32* @a
  %multmp = mul i32 %0, %1
  store i32 %multmp, i32* @fac
  %printfCall = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0))
  %printfCall1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  %2 = load i32, i32* @a
  %printfCall2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i32 0, i32 0), i32 %2)
  %printfCall3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  %printfCall4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i32 0, i32 0))
  %printfCall5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  %3 = load i32, i32* @fac
  %printfCall6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @11, i32 0, i32 0), i32 %3)
  %printfCall7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @12, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i32 0, i32 0))
  %4 = load i32, i32* @a
  %addtmp = add i32 %4, 1
  store i32 %addtmp, i32* @a
  %5 = load i32, i32* @a
  %ltcomparetmp = icmp ult i32 %5, 10
  br i1 %ltcomparetmp, label %L1, label %aftergoto

aftergoto:                                        ; preds = %L1
  ret void
}

declare i32 @printf(i8*, ...)
