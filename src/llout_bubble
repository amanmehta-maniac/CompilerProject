; ModuleID = 'Decaf compiler jit'

@i = common global i32 0
@j = common global i32 0
@arr = common global [10 x i32] zeroinitializer
@temp = common global i32 0
@next = common global i32 0
@0 = private unnamed_addr constant [20 x i8] c"Original array is: \00"
@1 = private unnamed_addr constant [3 x i8] c"%s\00"
@2 = private unnamed_addr constant [3 x i8] c"%s\00"
@3 = private unnamed_addr constant [2 x i8] c"\0A\00"
@4 = private unnamed_addr constant [3 x i8] c"%d\00"
@5 = private unnamed_addr constant [3 x i8] c"%s\00"
@6 = private unnamed_addr constant [2 x i8] c" \00"
@7 = private unnamed_addr constant [2 x i8] c" \00"
@8 = private unnamed_addr constant [3 x i8] c"%s\00"
@9 = private unnamed_addr constant [1 x i8] zeroinitializer
@10 = private unnamed_addr constant [3 x i8] c"%s\00"
@11 = private unnamed_addr constant [3 x i8] c"%s\00"
@12 = private unnamed_addr constant [2 x i8] c"\0A\00"
@13 = private unnamed_addr constant [18 x i8] c"Sorted array is: \00"
@14 = private unnamed_addr constant [3 x i8] c"%s\00"
@15 = private unnamed_addr constant [3 x i8] c"%s\00"
@16 = private unnamed_addr constant [2 x i8] c"\0A\00"
@17 = private unnamed_addr constant [3 x i8] c"%d\00"
@18 = private unnamed_addr constant [3 x i8] c"%s\00"
@19 = private unnamed_addr constant [2 x i8] c" \00"
@20 = private unnamed_addr constant [2 x i8] c" \00"
@21 = private unnamed_addr constant [3 x i8] c"%s\00"
@22 = private unnamed_addr constant [1 x i8] zeroinitializer
@23 = private unnamed_addr constant [3 x i8] c"%s\00"
@24 = private unnamed_addr constant [3 x i8] c"%s\00"
@25 = private unnamed_addr constant [2 x i8] c"\0A\00"

define void @main() {
entry:
  store i32 3, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @arr, i32 0, i32 0)
  store i32 2, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @arr, i32 0, i32 1)
  store i32 5, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @arr, i32 0, i32 2)
  store i32 7, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @arr, i32 0, i32 3)
  store i32 1, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @arr, i32 0, i32 4)
  store i32 0, i32* @i
  %printfCall = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @0, i32 0, i32 0))
  %printfCall1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  %0 = load i32, i32* @i
  %ltcomparetmp = icmp ult i32 %0, 5
  br i1 %ltcomparetmp, label %loop, label %afterloop

loop:                                             ; preds = %loop, %entry
  %1 = load i32, i32* @i
  %arr_Index = getelementptr [10 x i32], [10 x i32]* @arr, i32 0, i32 %1
  %2 = load i32, i32* %arr_Index
  %printfCall2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i32 0, i32 0), i32 %2)
  %printfCall3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  %printfCall4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  %3 = load i32, i32* @i
  %addtmp = add i32 %3, 1
  store i32 %addtmp, i32* @i
  %4 = load i32, i32* @i
  %ltcomparetmp5 = icmp ult i32 %4, 5
  br i1 %ltcomparetmp5, label %loop, label %afterloop

afterloop:                                        ; preds = %loop, %entry
  %printfCall6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @10, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @9, i32 0, i32 0))
  %printfCall7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i32 0, i32 0))
  store i32 0, i32* @i
  %5 = load i32, i32* @i
  %ltcomparetmp8 = icmp ult i32 %5, 5
  br i1 %ltcomparetmp8, label %loop9, label %afterloop10

loop9:                                            ; preds = %afterloop13, %afterloop
  store i32 0, i32* @j
  %6 = load i32, i32* @j
  %ltcomparetmp11 = icmp ult i32 %6, 4
  br i1 %ltcomparetmp11, label %loop12, label %afterloop13

afterloop10:                                      ; preds = %afterloop13, %afterloop
  %printfCall27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @14, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @13, i32 0, i32 0))
  %printfCall28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @15, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @16, i32 0, i32 0))
  store i32 0, i32* @i
  %7 = load i32, i32* @i
  %ltcomparetmp29 = icmp ult i32 %7, 5
  br i1 %ltcomparetmp29, label %loop30, label %afterloop31

loop12:                                           ; preds = %ifcont22, %loop9
  %8 = load i32, i32* @j
  %addtmp14 = add i32 %8, 1
  store i32 %addtmp14, i32* @next
  %9 = load i32, i32* @j
  %arr_Index15 = getelementptr [10 x i32], [10 x i32]* @arr, i32 0, i32 %9
  %10 = load i32, i32* @next
  %arr_Index16 = getelementptr [10 x i32], [10 x i32]* @arr, i32 0, i32 %10
  %11 = load i32, i32* %arr_Index15
  %12 = load i32, i32* %arr_Index16
  %gtcomparetmp = icmp ugt i32 %11, %12
  br i1 %gtcomparetmp, label %if, label %else21

afterloop13:                                      ; preds = %ifcont22, %loop9
  %13 = load i32, i32* @i
  %addtmp25 = add i32 %13, 1
  store i32 %addtmp25, i32* @i
  %14 = load i32, i32* @i
  %ltcomparetmp26 = icmp ult i32 %14, 5
  br i1 %ltcomparetmp26, label %loop9, label %afterloop10

if:                                               ; preds = %loop12
  %15 = load i32, i32* @j
  %arr_Index17 = getelementptr [10 x i32], [10 x i32]* @arr, i32 0, i32 %15
  %16 = load i32, i32* %arr_Index17
  store i32 %16, i32* @temp
  %17 = load i32, i32* @j
  %arr_Index18 = getelementptr [10 x i32], [10 x i32]* @arr, i32 0, i32 %17
  %18 = load i32, i32* @next
  %arr_Index19 = getelementptr [10 x i32], [10 x i32]* @arr, i32 0, i32 %18
  %19 = load i32, i32* %arr_Index19
  store i32 %19, i32* %arr_Index18
  %20 = load i32, i32* @next
  %arr_Index20 = getelementptr [10 x i32], [10 x i32]* @arr, i32 0, i32 %20
  %21 = load i32, i32* @temp
  store i32 %21, i32* %arr_Index20
  br label %ifcont22

else21:                                           ; preds = %loop12
  br label %ifcont22

ifcont22:                                         ; preds = %else21, %if
  %22 = load i32, i32* @j
  %addtmp23 = add i32 %22, 1
  store i32 %addtmp23, i32* @j
  %23 = load i32, i32* @j
  %ltcomparetmp24 = icmp ult i32 %23, 4
  br i1 %ltcomparetmp24, label %loop12, label %afterloop13

loop30:                                           ; preds = %loop30, %afterloop10
  %24 = load i32, i32* @i
  %arr_Index32 = getelementptr [10 x i32], [10 x i32]* @arr, i32 0, i32 %24
  %25 = load i32, i32* %arr_Index32
  %printfCall33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @17, i32 0, i32 0), i32 %25)
  %printfCall34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @18, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @19, i32 0, i32 0))
  %printfCall35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @21, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @20, i32 0, i32 0))
  %26 = load i32, i32* @i
  %addtmp36 = add i32 %26, 1
  store i32 %addtmp36, i32* @i
  %27 = load i32, i32* @i
  %ltcomparetmp37 = icmp ult i32 %27, 5
  br i1 %ltcomparetmp37, label %loop30, label %afterloop31

afterloop31:                                      ; preds = %loop30, %afterloop10
  %printfCall38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @23, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @22, i32 0, i32 0))
  %printfCall39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @24, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @25, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*, ...)
