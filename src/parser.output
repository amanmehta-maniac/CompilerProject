Terminals unused in grammar

   CODE
   ETOK
   ARR_ID
   ARR_NUM
   EQEQ
   EQUAL
   IF
   ELSE
   OR
   AND
   NOTEQ
   WHILE
   GOTO
   LABEL
   READ
   TOPRINT
   PRINT
   FOR
   SUBEQ
   ADDEQ
   LTEQ
   GTEQ
   '<'
   '>'
   '+'
   '-'
   '*'
   '/'
   '='


Grammar

    0 $accept: program $end

    1 program: DECL '{' declblocks '}'

    2 declblocks: %empty
    3           | declblocks declblock ';'

    4 declblock: INT variables

    5 variables: variable
    6          | variables ',' variable

    7 variable: ID
    8         | ID '[' NUMBER ']'


Terminals, with rules where they appear

$end (0) 0
'*' (42)
'+' (43)
',' (44) 6
'-' (45)
'/' (47)
';' (59) 3
'<' (60)
'=' (61)
'>' (62)
'[' (91) 8
']' (93) 8
'{' (123) 1
'}' (125) 1
error (256)
DECL (258) 1
CODE (259)
NUMBER (260) 8
INT (261) 4
ID (262) 7 8
ETOK (263)
ARR_ID (264)
ARR_NUM (265)
EQEQ (266)
EQUAL (267)
IF (268)
ELSE (269)
OR (270)
AND (271)
NOTEQ (272)
WHILE (273)
GOTO (274)
LABEL (275)
READ (276)
TOPRINT (277)
PRINT (278)
FOR (279)
SUBEQ (280)
ADDEQ (281)
LTEQ (282)
GTEQ (283)


Nonterminals, with rules where they appear

$accept (42)
    on left: 0
program (43)
    on left: 1, on right: 0
declblocks (44)
    on left: 2 3, on right: 1 3
declblock (45)
    on left: 4, on right: 3
variables (46)
    on left: 5 6, on right: 4 6
variable (47)
    on left: 7 8, on right: 5 6


State 0

    0 $accept: . program $end

    DECL  shift, and go to state 1

    program  go to state 2


State 1

    1 program: DECL . '{' declblocks '}'

    '{'  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: DECL '{' . declblocks '}'

    $default  reduce using rule 2 (declblocks)

    declblocks  go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: DECL '{' declblocks . '}'
    3 declblocks: declblocks . declblock ';'

    INT  shift, and go to state 6
    '}'  shift, and go to state 7

    declblock  go to state 8


State 6

    4 declblock: INT . variables

    ID  shift, and go to state 9

    variables  go to state 10
    variable   go to state 11


State 7

    1 program: DECL '{' declblocks '}' .

    $default  reduce using rule 1 (program)


State 8

    3 declblocks: declblocks declblock . ';'

    ';'  shift, and go to state 12


State 9

    7 variable: ID .
    8         | ID . '[' NUMBER ']'

    '['  shift, and go to state 13

    $default  reduce using rule 7 (variable)


State 10

    4 declblock: INT variables .
    6 variables: variables . ',' variable

    ','  shift, and go to state 14

    $default  reduce using rule 4 (declblock)


State 11

    5 variables: variable .

    $default  reduce using rule 5 (variables)


State 12

    3 declblocks: declblocks declblock ';' .

    $default  reduce using rule 3 (declblocks)


State 13

    8 variable: ID '[' . NUMBER ']'

    NUMBER  shift, and go to state 15


State 14

    6 variables: variables ',' . variable

    ID  shift, and go to state 9

    variable  go to state 16


State 15

    8 variable: ID '[' NUMBER . ']'

    ']'  shift, and go to state 17


State 16

    6 variables: variables ',' variable .

    $default  reduce using rule 6 (variables)


State 17

    8 variable: ID '[' NUMBER ']' .

    $default  reduce using rule 8 (variable)
