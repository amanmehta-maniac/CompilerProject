; ModuleID = 'Decaf compiler jit'

@x = common global i32 0
@i = common global i32 0
@j = common global [100 x i32] zeroinitializer
@0 = private unnamed_addr constant [12 x i8] c"\22omg done!\22\00"
@1 = private unnamed_addr constant [2 x i8] c"2\00"

define void @main() {
entry:
  store i32 5, i32* getelementptr inbounds ([100 x i32], [100 x i32]* @j, i32 0, i32 3)
  store i32 3, i32* @i
  br i1 icmp ugt (i32* getelementptr inbounds ([100 x i32], [100 x i32]* @j, i32 0, i32 3), i32* @i), label %if, label %else1

if:                                               ; preds = %entry
  %0 = load i32, i32* getelementptr inbounds ([100 x i32], [100 x i32]* @j, i32 0, i32 0)
  %addtmp = add i32 %0, 1
  store i32 %addtmp, i32* getelementptr inbounds ([100 x i32], [100 x i32]* @j, i32 0, i32 0)
  br label %ifcont2

else1:                                            ; preds = %entry
  br label %ifcont2

ifcont2:                                          ; preds = %else1, %if
  %1 = load i32, i32* @i
  %addtmp3 = add i32 %1, 1
  store i32 %addtmp3, i32* @i
  %2 = call i32 @puts(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i32 0, i32 0))
  %3 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  ret void
}

declare i32 @puts(i8*)
