; ModuleID = 'Decaf compiler jit'

@x = common global i32 0
@i = common global i32 0
@j = common global i32 0
@y = common global i32 0

define void @main() {
entry:
  store i32 0, i32* @x
  store i32 3, i32* @j
  store i32 99, i32* @y
  %ltcomapretmp1 = icmp ult i32* @j, 99
  br i1 %ltcomapretmp1, label %loop, label %afterloop

loop:                                             ; preds = %loop, %entry
  %i = phi i32 [ @j, %entry ], [ %nextval, %loop ]
  %0 = load i32, i32* @x
  %addtmp = add i32 %0, 1
  store i32 %addtmp, i32* @x
  %nextval = add i32 %i, i32* @j
  %ltcomparetmp = icmp ult i32 %nextval, 99
  br i1 %ltcomparetmp, label %loop, label %afterloop

afterloop:                                        ; preds = %loop, %entry
  br i1 true, label %loop1, label %afterloop2

loop1:                                            ; preds = %loop1, %afterloop
  %i3 = phi i32 [ 1, %afterloop ], [ %nextval4, %loop1 ]
  store i32* add (i32* @x, i32 1), i32* @x
  %nextval4 = add i32 %i3, 1
  %ltcomparetmp5 = icmp ult i32 %nextval4, 9
  br i1 %ltcomparetmp5, label %loop1, label %afterloop2

afterloop2:                                       ; preds = %loop1, %afterloop
  br i1 icmp ult (i32* @i, i32* @j), label %if, label %else

if:                                               ; preds = %afterloop2
  store i32* add (i32* @i, i32* @j), i32* @i
  br label %ifcont

else:                                             ; preds = %afterloop2
  br label %ifcont

ifcont:                                           ; preds = %else, %if
  store i32* add (i32* @x, i32 10), i32* @x
  ret void
}
