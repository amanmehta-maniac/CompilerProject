; ModuleID = 'Decaf compiler jit'

@sum = common global i32 0
@cumsum = common global [100 x i32] zeroinitializer
@arr = common global [100 x i32] zeroinitializer
@temp = common global i32 0
@i = common global i32 0
@j = common global i32 0
@prevval = common global i32 0
@0 = private unnamed_addr constant [19 x i8] c"initial array is: \00"
@1 = private unnamed_addr constant [3 x i8] c"%s\00"
@2 = private unnamed_addr constant [3 x i8] c"%d\00"
@3 = private unnamed_addr constant [3 x i8] c"%s\00"
@4 = private unnamed_addr constant [2 x i8] c" \00"
@5 = private unnamed_addr constant [2 x i8] c" \00"
@6 = private unnamed_addr constant [3 x i8] c"%s\00"
@7 = private unnamed_addr constant [1 x i8] zeroinitializer
@8 = private unnamed_addr constant [3 x i8] c"%s\00"
@9 = private unnamed_addr constant [3 x i8] c"%s\00"
@10 = private unnamed_addr constant [2 x i8] c"\0A\00"
@11 = private unnamed_addr constant [26 x i8] c"cumulative sum array is: \00"
@12 = private unnamed_addr constant [3 x i8] c"%s\00"
@13 = private unnamed_addr constant [3 x i8] c"%d\00"
@14 = private unnamed_addr constant [3 x i8] c"%s\00"
@15 = private unnamed_addr constant [2 x i8] c" \00"
@16 = private unnamed_addr constant [2 x i8] c" \00"
@17 = private unnamed_addr constant [3 x i8] c"%s\00"
@18 = private unnamed_addr constant [1 x i8] zeroinitializer
@19 = private unnamed_addr constant [3 x i8] c"%s\00"
@20 = private unnamed_addr constant [3 x i8] c"%s\00"
@21 = private unnamed_addr constant [2 x i8] c"\0A\00"

define void @main() {
entry:
  store i32 0, i32* @sum
  store i32 0, i32* @i
  %0 = load i32, i32* @i
  %lecomparetmp = icmp ule i32 %0, 10
  br i1 %lecomparetmp, label %loop, label %afterloop

loop:                                             ; preds = %loop, %entry
  %1 = load i32, i32* @i
  %arr_Index = getelementptr [100 x i32], [100 x i32]* @arr, i32 0, i32 %1
  %2 = load i32, i32* @i
  store i32 %2, i32* %arr_Index
  %3 = load i32, i32* @i
  %addtmp = add i32 %3, 1
  store i32 %addtmp, i32* @i
  %4 = load i32, i32* @i
  %lecomparetmp1 = icmp ule i32 %4, 10
  br i1 %lecomparetmp1, label %loop, label %afterloop

afterloop:                                        ; preds = %loop, %entry
  store i32 0, i32* @i
  %printfCall = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @0, i32 0, i32 0))
  %5 = load i32, i32* @i
  %lecomparetmp2 = icmp ule i32 %5, 10
  br i1 %lecomparetmp2, label %loop3, label %afterloop4

loop3:                                            ; preds = %loop3, %afterloop
  %6 = load i32, i32* @i
  %arr_Index5 = getelementptr [100 x i32], [100 x i32]* @arr, i32 0, i32 %6
  %7 = load i32, i32* %arr_Index5
  %printfCall6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), i32 %7)
  %printfCall7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  %printfCall8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  %8 = load i32, i32* @i
  %addtmp9 = add i32 %8, 1
  store i32 %addtmp9, i32* @i
  %9 = load i32, i32* @i
  %lecomparetmp10 = icmp ule i32 %9, 10
  br i1 %lecomparetmp10, label %loop3, label %afterloop4

afterloop4:                                       ; preds = %loop3, %afterloop
  store i32 0, i32* @i
  %printfCall11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @7, i32 0, i32 0))
  %printfCall12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  %printfCall13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @12, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @11, i32 0, i32 0))
  %10 = load i32, i32* @i
  %lecomparetmp14 = icmp ule i32 %10, 10
  br i1 %lecomparetmp14, label %loop15, label %afterloop16

loop15:                                           ; preds = %loop15, %afterloop4
  %11 = load i32, i32* @i
  %cumsum_Index = getelementptr [100 x i32], [100 x i32]* @cumsum, i32 0, i32 %11
  %12 = load i32, i32* @i
  %subtmp = sub i32 %12, 1
  %cumsum_Index17 = getelementptr [100 x i32], [100 x i32]* @cumsum, i32 0, i32 %subtmp
  %13 = load i32, i32* @i
  %arr_Index18 = getelementptr [100 x i32], [100 x i32]* @arr, i32 0, i32 %13
  %14 = load i32, i32* %cumsum_Index17
  %15 = load i32, i32* %arr_Index18
  %addtmp19 = add i32 %14, %15
  store i32 %addtmp19, i32* %cumsum_Index
  %16 = load i32, i32* @i
  %cumsum_Index20 = getelementptr [100 x i32], [100 x i32]* @cumsum, i32 0, i32 %16
  %17 = load i32, i32* %cumsum_Index20
  %printfCall21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @13, i32 0, i32 0), i32 %17)
  %printfCall22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @14, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @15, i32 0, i32 0))
  %printfCall23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @17, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @16, i32 0, i32 0))
  %18 = load i32, i32* @i
  %addtmp24 = add i32 %18, 1
  store i32 %addtmp24, i32* @i
  %19 = load i32, i32* @i
  %lecomparetmp25 = icmp ule i32 %19, 10
  br i1 %lecomparetmp25, label %loop15, label %afterloop16

afterloop16:                                      ; preds = %loop15, %afterloop4
  %printfCall26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @19, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @18, i32 0, i32 0))
  %printfCall27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @20, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @21, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*, ...)
